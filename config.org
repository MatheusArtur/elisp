#+TITLE: EmaccS
#+DATE: <2018-11-20 Tue>
#+AUTHOR: Matheus Artur
#+EMAIL: macc@ic.ufal.br
#+LANGUAGE: en
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)
#+DESCRIPTION:
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
[[img/dashLogo.png]]

* General recomendations and references
  This Emacs configuration should work fine on any GNU/Linux distribution, just get the external package dependencies. I cannot guarantee full functionality on others systems without some particular tweaks, but about 70% should work out of the box.
  For the sources I used to build this configuration file, I had two main ones. First 'daedreth' [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][YouTube channel]], really good for learning Elisp and the [[https://www.emacswiki.org/][Emacs wiki]] that contains pretty much everything about Emacs and it's packages.
* Basic configs
  Some built-in emacs configurable variables, most interface and editing style related.
** Toolbar, menu and Scrollbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Replace Yes/No alias to y/n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Scrolls one line per time. instead of the retarded default
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Disable auto-save and backup files
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
  (setq make-backup-file nil)
#+END_SRC

** Hightline current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

** Remove annoying ring bell sound
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Disables startup messages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** UTF-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** Subword-mode
   When the subword-mode is enable, uppercase letters are marked as a single word, VarAtkOne would be identified as =Var=, =Atk=, and =One=. Really good for managing multiple variables.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
  #+END_SRC

** Auto-pairing (), "", {}, [].
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                             (?\( . ?\))
                             (?\[ . ?\])
                             (?\" . ?\")
                             (?\{ . ?\})))
  (electric-pair-mode t)
#+END_SRC

** Highlight syntax-pairs (), {}, [], etc..
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Lines and column numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

** Functions
*** Edit config file function
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

*** Reload config file function
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

*** Kill whole-word function
#+BEGIN_SRC emacs-lisp
  (defun kill-word-function ()
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1)
    (delete-char 1))
  (global-set-key (kbd "C-c w") 'kill-word-function)
#+END_SRC

** IRC configs
#+BEGIN_SRC emacs-lisp
(setq erc-nick "macc")
(setq erc-prompt (lambda () (concat "[" (buffer-name) "]")))
(setq erc-hide-list '("JOIN" "PART" "QUIT"))

(setq erc-server-history-list '("irc.rizon.net"
                                "localhost"))

(use-package erc-hl-nicks
  :ensure t
  :config
    (erc-update-modules))
#+END_SRC

* Terminal emulator
  Some tweaks to use the Emacs ansi-term.

** Set Bash as default shell
#+BEGIN_SRC emacs-lisp
  (defvar term "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list term)))
  (ad-activate 'ansi-term)
#+END_SRC

** Map Super+Enter to terminal
#+BEGIN_SRC emacs-lisp
  (when window-system (global-set-key (kbd "<s-return>") 'ansi-term))
#+END_SRC

* Packages
** Which-key
   A package meant for learning emacs shortcuts, it gently lists all possible binds for completing all sorts of commands.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** Beacon
   Highlight the current line when changing buffers.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

** Avy
   Avy for perfect navigation in the file, saves me hundreds of keypresses and completly ditches a mouse usage.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

** Project manager
   Easy to use project manager.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
      (projectile-mode 1))

  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC

** Git integration
   Comfy git managing with Meta-g.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC

** DashBoard
   The "home" buffer of emacs to be said. The project item requires =projectile= package, listed above.
 #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook)
     (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
     (setq dashboard-items '((recents . 5)
			     (projects . 5)
			     (agenda . 5)
			     (bookmarks . 5)))
	   (setq dashboard-banner-logo-title "GNU/Emacs"))
 #+END_SRC

** Dmenu
   Dmenu launchs applications within emacs.
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
      ("s-SPC" . 'dmenu))
#+END_SRC

** Linum
   Linum lists the current and relative line number in the left corner in the code.
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC

** Hungry delete
   Saves you from pressing (((((Backspace))))) for 2 hours straight, just to get rid of a huge blank space.
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC

** Pretty simbols for booleans, lambda, etc...
#+BEGIN_SRC emacs-lisp
  (when window-system
	(use-package pretty-mode
	:ensure t
	:config
	(global-pretty-mode t)))
#+END_SRC

** Edit root@ files.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC

** Manage Emacs windows in a comfortable way
*** Use switch-window plugin
    It only works with more than two active windows, mapping them with "a, s, d, f, j, k, l" for a precise switch.
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '( "a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))

#+END_SRC

*** Functions for a cursor follow-up on new created windows
#+BEGIN_SRC emacs-lisp
   (defun vertical-win ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'vertical-win)

  (defun horizontal-win ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'horizontal-win)
#+END_SRC

** Kill-Ring menu
   Now you can navigate in your kill-ring list using "M-y", great.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

** Multiple mark

   After selecting the wanted sting, press =C-c q= to mark the next one.
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind
    ("C-c q" . 'mark-next-like-this)
    ("C-c a" . 'mark-all-like-this))
#+END_SRC

* IDO mode, buffer and file navigation
  "C-x b" for default is really bad for navigating in buffers, specially if you are working with a dozen of them. IDO-mode + the ido-vertical-mode package lists all buffers and accept tab completion.

** Enable IDO mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

** IDO vertical mode
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** SMEX, completion for "M-x"
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC

** Setup Ibuffer, a non-retard buffer navigator
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
#+END_SRC

** C-x k kills the current buffer
#+BEGIN_SRC emacs-lisp
  (defun murder-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'murder-buffer)
#+END_SRC

* Modeline (status bar)
  Making the modeline great for information display.

** Modeline(spaceline)
#+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :config
      (require 'spaceline-config)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC

** Format
*** Hiding minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'irony-mode)
    (diminish 'abbrev-mode)
    (diminish 'linum-relative-mode)
    (diminish 'projectile-mode)
    (diminish 'eldoc-mode)
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'which-key-mode))
#+END_SRC

*** Laptop battery display
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config
      (setq fancy-battery-show-percentage t)
      (setq battery-update-interval 10)
      (if window-system
        (fancy-battery-mode)
        (display-battery-mode)))
#+END_SRC

*** Time and date
#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil)
(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC

* Org Mode
**  C-c ' replace current buffer
    The defaults create a new windown.
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

** Org bullets
   Organize the headers in a nice way.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda  () (org-bullets-mode))))
#+END_SRC

** Highlight SRC syntax
   Show the syntax in the SRC cases.
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** Macro programing languages SRC cases
   Because typing the languague everytime is very repetitive.

*** For Emacs-Lisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

*** For C
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("cc" "#+BEGIN_SRC c\n?\n#+END_SRC"))
#+END_SRC

*** For C++
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("cpp" "#+BEGIN_SRC c++\n?\n#+END_SRC"))
#+END_SRC

* Org Agenda

   My default org files is located on /~/Sync/schedules/ and I mainly use =syncthing= to sync the files
   between computers and mobile. Just change to whatever folder you want to synchronize.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (append
			  (file-expand-wildcards "~/Sync/schedules/*.org")))

  (when window-system (global-set-key (kbd "s-a") 'org-agenda))
 #+END_SRC

** Open schedules directory
#+BEGIN_SRC emacs-lisp
  (defun acess-routine()
    (interactive)
    (dired "~/sync/schedules"))
  (global-set-key (kbd "C-c s") 'acess-routine)
#+END_SRC

* Programming
  Snippets & autocompletion packages first, then configuration by language.

** Dependencies
   - =clang= for C/C++ completion.
   - =sbcl= (stell bank common lisp) interpreter for the various lisp dialects completion.

** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC

** Company, main completion package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

** A spellchecker that works with programming languages
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
     :ensure t)
#+END_SRC

** C/C++ Packages & Configs
*** Yasnippet
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook 'yas-minor-mode)
(add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))
#+END_SRC

*** Company
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'company
(add-hook 'c++-mode-hook 'company-mode)
(add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'yas-minor-mode)
(add-hook 'python-mode-hook 'flycheck-mode)

(with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

(use-package company-jedi
  :ensure t
  :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))

(defun python-mode-company-init ()
  (setq-local company-backends '((company-jedi
                                  company-etags
                                  company-dabbrev-code))))

(use-package company-jedi
  :ensure t
  :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))
#+END_SRC

** Elisp Packages & Configs

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+END_SRC

** Bash
#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'yas-minor-mode)
(add-hook 'shell-mode-hook 'flycheck-mode)
(add-hook 'shell-mode-hook 'company-mode)

(defun shell-mode-company-init ()
  (setq-local company-backends '((company-shell
                                  company-shell-env
                                  company-etags
                                  company-dabbrev-code))))

(use-package company-shell
  :ensure t
  :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC

** Cheat.sh
#+BEGIN_SRC emacs-lisp
  (use-package cheat-sh
    :ensure t)
#+END_SRC

* Hydra
  Hydra example

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :defer 2
    :bind ("C-c c" . hydra-clock/body))

  (defhydra hydra-clock (:color blue)
      "
      ^
      ^Clock^             ^Do^
      ^─────^─────────────^──^─────────
      _q_ quit            _c_ cancel
      ^^                  _d_ display
      ^^                  _e_ effort
      ^^                  _i_ in
      ^^                  _j_ jump
      ^^                  _o_ out
      ^^                  _r_ report
      ^^                  ^^
      "
      ("q" nil)
      ("c" org-clock-cancel :color pink)
      ("d" org-clock-display)
      ("e" org-clock-modify-effort-estimate)
      ("i" org-clock-in)
      ("j" org-clock-goto)
      ("o" org-clock-out)
      ("r" org-clock-report))
#+END_SRC

